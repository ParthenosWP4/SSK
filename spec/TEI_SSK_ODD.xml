<?xml version="1.0"?>
<?xml-model href="tei_odds.rnc" type="application/relax-ng-compact-syntax"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Standardization Survival Kit: TEI specification </title>
        <author>
          <name>Charles Riondet</name>
        </author>
        <author>
          <name>Laurent Romary</name>
        </author>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <notesStmt>
        <note type="ns">http://www.example.org/ns/nonTEI</note>
      </notesStmt>
      <sourceDesc>
        <p>created on Friday 28th April 2017 08:22:36 AM by Charles Riondet</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change>First major revision on <date when="2017-07-13">July 13th 2017</date> by Laurent
        Romary and Charles Riondet. Replacement of <gi>listBibl</gi> by <gi>listRef</gi> in the
        events. See dated comments for more information.</change>
      <change>First iteration of documentation paragraphs presenting the way the SSK TEI is designed
        on <date when="2017-08-29">August 29th 2017</date>.</change>
      <change>Second major revision on <date when="2017-09-11">September 11th 2017</date> by Laurent
        Romary and Charles Riondet. Replacement of <gi>listRef</gi> by <gi>linkGrp</gi> in the
        events.</change>
      <change>On <date when="2019-01-23">January 23th January</date>, The SSK specification
        underwent an important cleanup by Charles Riondet, in particular the documentation part,
        mostly outdated. The up-to-date version of the documentation can be found at <ref
          target="https://ssk.readthedocs.io">https://ssk.readthedocs.io</ref>.</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>
      <div>
        <head>The SSK TEI in short</head>
        <p>The SSK offers researchers needing standardized methods and resources complete frameworks
          to carry out their project, in Arts and Humanities and Heritage science. It takes the form
          of step by step research scenarios where the use of standards is clearly identified.
          Theses scenarios are divided into different steps, implying specific tasks. Each step
          contains a set of bibliographical resources.</p>
        <div>
          <head>Main elements</head>
          <p>The main elements of the SSK TEI are: <specList>
              <specDesc key="listEvent"/>
              <specDesc key="event"/>
              <specDesc key="linkGrp"/>
              <specDesc key="ref"/>
            </specList>
          </p>
          <p>A scenario is a list of events (<gi>listEvent</gi>), each scenario step is an event
              (<gi>event</gi>). </p>
          <p><gi>event</gi>, core element of the SSK scenario, is a full description of the scenario
            step: <list>
              <item>a label:<specList>
                  <specDesc key="label"/>
                </specList>
              </item>
              <item>a description: <specList>
                  <specDesc key="desc"/>
                </specList></item>
              <item>some descriptive terms following controlled vocabularies: <specList>
                  <specDesc key="term"/>
                </specList></item>
              <item>bibliographical references:<specList>
                  <specDesc key="ref"/>
                </specList></item>
            </list>Events are stored in external files, allowing them to be used in different
            scenarios. Scenario files gather <gi>event</gi> in a <gi>listEvent</gi> element, by
            referencing them with a <att>ref</att> attribute. It is however possible to modify the
            content of the event called in a scenario, using the attribute <att>mode</att> (see
            below)</p>
          <p>The resources consists of bibliographical references. They are gathered in
              <gi>linkGrp</gi> elements. They are of two types : <code>general resources</code> and
              <code>project specific</code>. <gi>linkGrp</gi> elements can be repeated (one per
              <code>project</code>). At each level, the elements are enriched with keywords that can
            be <gi>term</gi> or XML attributes.</p>
        </div>
        <div>
          <head>Common attributes</head>
          <p>The attributes used by all the elements are: <list>
              <item><att>xml:lang</att>. This attribute is mandatory in all the content
                elements,namely <gi>label</gi>, <gi>desc</gi>, <gi>term</gi>. The authoritative list
                of registered language subtags is maintained by IANA and is available at <ref
                  target="http://www.iana.org/assignments/language-subtag-registry"
                  >http://www.iana.org/assignments/language-subtag-registry</ref>. <egXML
                  xmlns="http://www.tei-c.org/ns/Examples">
                  <head xml:lang="en">Create associated documentation</head>
                  <head xml:lang="fr">Création de la documentation associée</head>
                </egXML></item>
              <item><att>mode</att>, available for some content elements. The <att>mode</att> is
                used in scenario files to allow for modification of the imported steps.</item>
              <item>the <att>type</att> attribute is required in most elements.</item>
            </list>
          </p>
        </div>
      </div>
    </body>
    <back>
      <div>
        <schemaSpec ident="TEI_SSK" xml:lang="en" start="TEI">
          <moduleRef key="core"/>
          <moduleRef key="tei"/>
          <moduleRef key="header"/>
          <moduleRef key="textstructure"/>
          <moduleRef key="namesdates"/>
          <moduleRef key="linking"/>
          <moduleRef key="tagdocs"/>
          <moduleRef key="figures"/>

          <!-- Elements changed-->
          <elementSpec ident="TEI" mode="change">
            <constraintSpec scheme="schematron" ident="ns">
              <constraint>
                <sch:ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="xmlid" scheme="schematron" type="SSK">
              <constraint>
                <sch:rule context="tei:TEI">
                  <sch:let name="fileName" value="tokenize(document-uri(/), '/')[last()]"/>
                  <sch:assert test="string(@xml:id) = substring-before($fileName, '.xml')"
                    role="error">The xml:id of the TEI element should be equal to the name of the
                    file, without the file extension. Currently the value of xml:id is
                      "<sch:value-of select="@xml:id"/>" whilst the file name is "<sch:value-of
                      select="$fileName"/>"</sch:assert>
                  <sch:assert test="string(@type) = 'researchScenario' or 'researchStep'"
                    role="error">TEI/@type should be either "researchScenario" or "researchStep".
                    The current value of TEI/@type is "<sch:value-of select="@type"/>"</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="TEItype" scheme="schematron" type="SSK">
              <constraint>
                <sch:rule context="tei:TEI">
                  <sch:assert test="string(@type) = 'researchScenario' or 'researchStep'"
                    role="error">TEI/@type should be either "researchScenario" or "researchStep".
                    The current value of TEI/@type is "<sch:value-of select="@type"/>"</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <attList>
              <attDef ident="type" usage="req" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="closed" mode="replace">
                  <valItem ident="researchStep"/>
                  <valItem ident="researchScenario"/>
                </valList>
              </attDef>
            </attList>
          </elementSpec>

          <elementSpec ident="titleStmt" mode="change">
            <constraintSpec ident="authorsReq" scheme="schematron">
              <constraint>
                <sch:rule context="tei:titleStmt">
                  <sch:assert test="tei:author" role="error">All scenarios and steps should have
                    identified authors.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="sponsorReq" scheme="schematron">
              <constraint>
                <sch:rule context="tei:titleStmt">
                  <sch:report test="not(tei:sponsor)" role="warning">The main sponsor of the SSK is
                    the PARTHENOS project. All scenarios and steps should record this
                    information.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>

          <elementSpec ident="author" mode="change">
            <constraintSpec ident="nameAffiliation" scheme="schematron">
              <constraint>
                <sch:rule context="tei:author">
                  <sch:assert test="tei:persName and tei:affiliation" role="error">You need to
                    supply the name and the affiliation of all authors.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>

          <elementSpec ident="publicationStmt" mode="change">
            <constraintSpec ident="authorityReq" scheme="schematron">
              <constraint>
                <sch:rule context="tei:publicationStmt">
                  <sch:assert test="tei:authority" role="error">An authority responsibile for making
                    the scenario or the step available should be provided. This authority can be the
                    project or the team in the context which the research process described in the
                    scenario has been carried out.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>

          <elementSpec ident="availability" mode="change">
            <constraintSpec ident="licenceReq" scheme="schematron">
              <constraint>
                <sch:rule context="tei:availability">
                  <sch:assert test="tei:licence/@target and tei:licence/tei:p" role="error">A
                    licence should be applied to all scenarios and steps. The declaration of the
                    licence chosen in made by a clear sentence in natural language (in a p element)
                    and a link towards the licence (with the attribute @target).</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="CClicence" scheme="schematron">
              <constraint>
                <sch:rule context="tei:availability/tei:licence">
                  <sch:assert
                    test="@target = 'http://creativecommons.org/licenses/by/4.0/' or @target = 'http://creativecommons.org/publicdomain/zero/1.0/'"
                    role="error"> The licences of the scenarios and steps should be CC-BY 4.0 or CC0
                    1.0 Don't forget to put the link towards the licence reference text in the
                    @target attribute. The current value of "<sch:name path="@target"/>" is
                      "<sch:value-of select="@target"/>"</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>

          <elementSpec ident="sourceDesc" mode="change">
            <constraintSpec ident="sourceDescWarn" scheme="schematron">
              <constraint>
                <sch:rule context="tei:sourceDesc" role="warning">
                  <sch:report test="child::*" role="information">sourceDesc in mandatory in TEI, so
                    if you want to give details on the way the scenario was conceived, it is the
                    appropriate location.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>

          <elementSpec ident="revisionDesc" mode="change">
            <constraintSpec ident="changeConstr" scheme="schematron">
              <constraint>
                <sch:rule context="tei:revisionDesc/tei:change">
                  <sch:assert test="tei:date and tei:persName and tei:affiliation and tei:desc"
                    role="information">When recording a revision, some precise metadata must be
                    given : the date of the revision, the name of the responsibe and his/her
                    affiliation and a description. </sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>
          
          <elementSpec ident="body" mode="change">
            <constraintSpec ident="typeInconsistency1" scheme="schematron">
              <constraint>
                <sch:rule context="tei:body[ancestor::tei:TEI[@type = 'researchScenario']]/tei:div/@type">
                  <sch:assert test=". = 'researchScenario'" role="warning">@type attribute incoherence: document
                    type is '<sch:value-of select="ancestor::tei:TEI/@type"/>' and current element type value is
                    '<sch:value-of select="."/>'</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="typeInconsistency2" scheme="schematron">
              <constraint>
                <sch:rule context="tei:body[ancestor::tei:TEI[@type = 'researchStep']]/tei:div/@type">
                  <sch:assert test=". = 'researchStep'" role="warning">@type attribute incoherence: document
                    type is '<sch:value-of select="ancestor::tei:TEI/@type"/>' and current element type value is
                    '<sch:value-of select="."/>'</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>

 
          <elementSpec ident="listEvent" mode="change">
            <content>
              <sequence>
                <classRef key="model.headLike" minOccurs="0" maxOccurs="unbounded"/>
                <classRef key="model.eventLike" minOccurs="1" maxOccurs="unbounded"/>
              </sequence>
            </content>
          </elementSpec>

          <elementSpec ident="event" mode="change">
            <classes mode="change">
              <!--2017-07-17: <event> is now member of the class att.combinable, i.e., can have @mode for attribute. In the SSK,
                        it is used when a scenario uses a step, but want to add additional information, or change it-->
              <memberOf key="att.combinable"/>
            </classes>
            <content>
              <!-- Allow empty <event> elements -->
              <sequence>
                <alternate minOccurs="0" maxOccurs="unbounded">
                  <classRef key="model.headLike" minOccurs="0" maxOccurs="unbounded"/>
                  <classRef key="model.pLike"/>
                  <classRef key="model.labelLike"/>
                  <classRef key="model.noteLike"/>
                  <classRef key="model.biblLike"/>
                  <elementRef key="linkGrp"/>
                  <elementRef key="link"/>
                </alternate>
                <elementRef key="event" minOccurs="0" maxOccurs="unbounded"/>
                <!-- 2017-11-15: Add param as child of event-->
                <!--<elementRef key="param" minOccurs="0" maxOccurs="unbounded"/>-->
              </sequence>
            </content>
            <!--<constraintSpec scheme="schematron" ident="paramInScenarios">
              <desc>the parameters, expressed by <gi>param</gi> should only be used in scenario
                files, i.e. files where TEI <att>type</att> is <hi>researchScenario</hi></desc>
              <constraint>
                <sch:rule context="tei:param">
                  <sch:assert test="ancestor::tei:TEI[@type ='researchScenario']">Parameters should
                    only be used in scenario files</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>-->
            <attList>
              <attDef ident="type" usage="req" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="closed" mode="replace">
                  <valItem ident="researchStep"/>
                  <valItem ident="researchScenario"/>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
          
          <elementSpec ident="head" mode="change">
            <classes mode="change">
              <!--2017-07-17: <head> is now member of the class att.combinable, i.e., can have @mode for attribute. In the SSK,
                        it is used when a scenario uses a step, but want to add additional information, or change it -->
              <memberOf key="att.combinable"/>
            </classes>
            <constraintSpec ident="headShort" scheme="schematron">
              <constraint>
                <sch:rule context="tei:head[parent::div or parent::event]">
                  <sch:assert test="string-length(.) &gt; 9" role="error"> The title is too short:
                    10 characters minimum. Your title is <sch:value-of
                      select="10 - string-length(.)"/> characters too short.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="headLong" scheme="schematron">
              <constraint>
                <sch:rule context="tei:head[parent::div or parent::event]">
                  <sch:assert test="string-length(.) &lt; 101" role="error">The title is too long:
                    100 characters maximum. Your title is <sch:value-of
                      select="string-length(.) - 100"/> characters too long.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="headSc" scheme="schematron">
              <constraint>
                <sch:rule context="tei:head[parent::div]">
                  <sch:report test="normalize-space(.)" role="information">The title of a scenario
                    should describe the main goal of the scenario.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="headSt" scheme="schematron">
              <constraint>
                <sch:rule context="tei:head[parent::event]">
                  <sch:assert
                    test="matches(., '(^\w*(ing|ion|ment|ments) )|( \w*(ing|ion|ment|ments$))')"
                    role="information">The title of a step should describe the action to perform,
                    starting or ending with a gerund (or an infinitive), or a noun .</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="typeInconsistency1" scheme="schematron">
              <constraint>
                <sch:rule context="tei:head[ancestor::tei:TEI[@type = 'researchScenario']]/@type">
                  <sch:assert test=". = 'scenarioTitle'" role="warning">@type attribute incoherence: document
                    type is '<sch:value-of select="ancestor::tei:TEI/@type"/>' and current element type value is
                    '<sch:value-of select="."/>'</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="typeInconsistency2" scheme="schematron">
              <constraint>
                <sch:rule context="tei:head[ancestor::tei:TEI[@type = 'researchStep']]/@type">
                  <sch:assert test=". = 'stepTitle'" role="warning">@type attribute incoherence: document type
                    is '<sch:value-of select="ancestor::tei:TEI/@type"/>' and current element type value is
                    '<sch:value-of select="."/>'</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <attList>
              <attDef ident="type" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="closed" mode="replace">
                  <valItem ident="stepTitle"/>
                  <valItem ident="scenarioTitle"/>
                </valList>
              </attDef>
            </attList>
          </elementSpec>

          <elementSpec ident="linkGrp" mode="change">
            <classes mode="change">
              <!--2019-01-23: <linkGrp> is now member of the class att.combinable, i.e., can have @mode for attribute. In the SSK,
                        it is used when a scenario uses a step, but want to add additional information, or change it -->
              <memberOf key="att.combinable"/>
            </classes>
            <content>
              <elementRef key="ref" minOccurs="1" maxOccurs="unbounded"/>
            </content>
            
            <constraintSpec ident="projectResources1" scheme="schematron">
              <constraint>
                <sch:rule context="tei:linkGrp[@type = 'projectResources']">
                  <sch:assert test="normalize-space(@corresp)" role="error">Need a value for
                    @corresp</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="projectResources2" scheme="schematron">
              <constraint>
                <sch:rule context="tei:linkGrp[@type = 'projectResources']">
                  <sch:assert test="matches(@corresp, '^https?:')" role="error">Value of @corresp should be a
                    valid URI. The current value of @corresp for "<sch:name path="."/>" is <sch:value-of
                      select="@corresp"/></sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="projectResources3" scheme="schematron">
              <constraint>
                <sch:rule context="tei:linkGrp[@type = 'projectResources']">
                  <sch:assert test="normalize-space(@source)" role="error">The attribute @source should contain
                    the name of the project whose references are listed inside the &lt;linkGrp&gt;. The current
                    value of @source for "<sch:name path="."/>" is <sch:value-of select="@source"/></sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <attList>
              <attDef ident="type" usage="req" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="semi" mode="replace">
                  <valItem ident="generalResources"/>
                  <valItem ident="projectResources"/>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
          
          <elementSpec ident="ref" mode="change">
            <classes mode="change">
              <memberOf key="att.combinable"/>
            </classes>
            <constraintSpec ident="zotero" scheme="schematron">
              <constraint>
                <sch:rule context="tei:ref[@source = 'zotero'][parent::tei:linkGrp]">
                  <sch:assert
                    test="matches(@target, '(wp2|wp3|wp4):[A-Z0-9]{8}') or matches(@target, '[A-Z0-9]{8}')"
                    role="warning">The reference of a Zotero record is made with the Zotero item key (8 capitals
                    or digits)</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <attList>
              <attDef ident="type" usage="req" mode="replace">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="semi" mode="replace">
                  <valItem ident="linkDesc">
                    <gloss xml:lang="en">link for the &lt;desc&gt; element</gloss>
                  </valItem>
                  <valItem ident="spec">
                    <gloss xml:lang="en">Specification</gloss>
                    <gloss xml:lang="fr">Spécification</gloss>
                  </valItem>
                  <valItem ident="report">
                    <gloss xml:lang="en">Report</gloss>
                    <gloss xml:lang="fr">Rapport</gloss>
                  </valItem>
                  <valItem ident="blog">
                    <gloss xml:lang="en">Blog</gloss>
                    <gloss xml:lang="fr">Article de blog</gloss>
                  </valItem>
                  <valItem ident="code">
                    <gloss xml:lang="en">Scripts and code</gloss>
                    <gloss xml:lang="fr">Scripts et code</gloss>
                  </valItem>
                  <valItem ident="paper">
                    <gloss xml:lang="en">Scholarly paper</gloss>
                    <gloss xml:lang="fr">publication scientifique</gloss>
                  </valItem>
                  <valItem ident="library">
                    <gloss xml:lang="en">Computing library</gloss>
                  </valItem>
                  <valItem ident="database">
                    <gloss xml:lang="en">Database</gloss>
                    <gloss xml:lang="fr">Base de données</gloss>
                  </valItem>
                  <valItem ident="tutorial">
                    <gloss xml:lang="en">Tutorial</gloss>
                    <gloss xml:lang="fr">Tutoriel</gloss>
                  </valItem>
                  <valItem ident="tool">
                    <gloss xml:lang="en">Computing tool, software</gloss>
                    <gloss xml:lang="fr">Logiciel, outil computationnel</gloss>
                  </valItem>
                  <valItem ident="service">
                    <gloss xml:lang="en">Curating of hosting service</gloss>
                    <gloss xml:lang="fr">Offre de service de curation ou d'hébergement</gloss>
                  </valItem>
                  <valItem ident="bibliography">
                    <gloss xml:lang="en">Bibliography</gloss>
                    <gloss xml:lang="fr">Bibliographie</gloss>
                  </valItem>
                </valList>
              </attDef>
              <attDef ident="source" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="semi" mode="add">
                  <valItem ident="zotero"/>
                  <valItem ident="github"/>
                </valList>
                <remarks>
                  <p>Maybe the values of the attribute @source should be stored in an external
                    parameter file. </p>
                </remarks>
              </attDef>
            </attList>
          </elementSpec>
          <!-- Prose elements present is <event> -->
          <elementSpec ident="term" mode="change">
            <classes mode="change">
              <!--2017-07-17: <term> is now member of the class att.combinable, i.e., can have @mode for attribute. In the SSK,
                        it is used when a scenario uses a step, but want to add additional information, or change it -->
              <memberOf key="att.combinable"/>
            </classes>
            <attList>
              <attDef ident="type" usage="req" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="semi" mode="replace">
                  <valItem ident="standard"/>
                  <valItem ident="activity"/>
                  <valItem ident="object"/>
                  <valItem ident="technique"/>
                  <valItem ident="policy"/>
                  <valItem ident="discipline"/>
                </valList>
              </attDef>
            </attList>
          </elementSpec>
         
          <elementSpec ident="desc" mode="change">
            <classes mode="change">
              <!--2017-07-17: <desc> is now member of the class att.combinable, i.e., can have @mode for attribute. In the SSK,
                        it is used when a scenario uses a step, but want to add additional information, or change it-->
              <memberOf key="att.combinable"/>
              <memberOf key="model.pLike"/>
            </classes>
            <content>
              <alternate minOccurs="0" maxOccurs="unbounded">
                <!-- Allow <p> in <desc>. -->
                <elementRef key="p" minOccurs="0"/>
                <textNode/>
                <elementRef key="list" minOccurs="0"/>
                <elementRef key="ref" minOccurs="0"/>
                <elementRef key="abbr" minOccurs="0"/>
                <elementRef key="expan" minOccurs="0"/>
                <elementRef key="term" minOccurs="0"/>
              </alternate>
            </content>
            <constraintSpec ident="descShort" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'definition'][parent::div]">
                  <sch:assert test="string-length(.) &gt; 299" role="error"> The description is a
                    bit too short and should be around 300 characters long minimum. Your description is
                      <sch:value-of select="string-length(.)"/> characters long. Note that you can
                    use the following TEI tags: &lt;list&gt;, &lt;item&gt; and
                    &lt;ref&gt;.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="descLong" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'definition'][parent::div]">
                  <sch:assert test="string-length(.) &lt; 1500" role="error">The scenario description is a bit long. We recommand a maximum lenght of 1.500
                    characters. Your description is <sch:value-of select="string-length"/> characters
                    long.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="refList" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type='definition']">
                  <sch:assert test="tei:list or tei:ref or text()" role="error"> In the &lt;desc
                    type="definition&gt;, there should be nothing more than text, &lt;list&gt; and
                    &lt;ref&gt;.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="noTermsActivity" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:report
                    test="ancestor::tei:TEI[@type = 'researchStep'] and count(tei:term[@type = 'activity']) = 0"
                    role="error">A step should be described by an activity term, taken from the TADirAH
                    taxonomy.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="scenarioActivity" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:report
                    test="ancestor::tei:TEI[@type = 'researchScenario'] and term[@type = 'activity']"
                    role="error">The activity terms are more suitable for describing steps rather than
                    scenarios. It is recommended to choose one activity term per step.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="noTermsStandards" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:report
                    test="count(tei:term[@type = 'standard']) = 0"
                    see="http://ssk.huma-num.fr/#/glossary/standards" role="information">A scenario or a step could have
                    several keywords related to standards. Check the documentation for more details</sch:report>
              </sch:rule></constraint>
            </constraintSpec>
            
            <constraintSpec ident="noTermsDiscipline" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:report
                    test="ancestor::tei:TEI[@type = 'researchScenario'] and count(tei:term[@type = 'discipline']) = 0"
                    see="http://ssk.huma-num.fr/#/glossary/disciplines" role="information">A scenario could have
                    several keywords related to disciplines. Check the documentation for more
                    details.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="noTermsTechniques" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:report
                    test="ancestor::tei:TEI[@type = 'researchScenario'] and count(tei:term[@type = 'technique']) = 0"
                    see="http://ssk.huma-num.fr/#/glossary/techniques" role="information">A scenario could have
                    several keywords related to research techniques. Check the Tadirah taxonomy for more
                    details.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="noTermsObject" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:report
                    test="ancestor::tei:TEI[@type = 'researchScenario'] and count(tei:term[@type = 'object']) = 0"
                    see="http://ssk.huma-num.fr/#/glossary/standards/objects" role="information">A scenario
                    could have several keywords related to research objects. Check the Tadirah taxonomy for more
                    details.</sch:report>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="TMTermsActivity" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:assert test="count(tei:term[@type = 'activity']) &lt; 2" role="error">A step should be described by just one activity tag.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="TMTermsStandards" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:assert test="count(tei:term[@type = 'standard']) &lt; 5" role="warning">More than 4 terms
                    of the same vocabulary type may be too much: STANDARD</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="TMTermsDisciplines" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:assert test="count(tei:term[@type = 'discipline']) &lt; 5" role="warning">More than 4 terms
                    of the same vocabulary type may be too much: DISCIPLINE</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            <constraintSpec ident="TMTermsTechniques" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:assert test="count(tei:term[@type = 'technique']) &lt; 5" role="warning">More than 4 terms
                    of the same vocabulary type may be too much: TECHNIQUE</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="TMTermsObjects" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']">
                  <sch:assert test="count(tei:term[@type = 'object']) &lt; 5" role="warning">More than 4 terms
                    of the same vocabulary type may be too much: OBJECT</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
            
            <constraintSpec ident="sourceTerms" scheme="schematron">
              <constraint>
                <sch:rule context="tei:desc[@type = 'terms']/tei:term">
                  <sch:assert test="@source" role="error">The attribute source is important to specifiy which
                    vocabulary was used. The main ones are "tadirah", aurehal, "standard".</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
           
            
            <attList>
              <attDef ident="type" usage="req" mode="change">
                <datatype>
                  <dataRef key="teidata.enumerated"/>
                </datatype>
                <valList type="semi" mode="replace">
                  <valItem ident="definition"/>
                  <valItem ident="terms"/>
                </valList>
              </attDef>
              <!-- @xml:lang is required -->
              <attDef ident="xml:lang" usage="req" mode="change"/>
            </attList>
          </elementSpec>
          
          <elementSpec ident="p" mode="change">
            <!-- Constraint the possibilities within <p> -->
            <content>
              <alternate minOccurs="0" maxOccurs="unbounded">
                <textNode/>
                <elementRef key="list" minOccurs="0"/>
                <elementRef key="ref" minOccurs="0"/>
                <elementRef key="abbr" minOccurs="0"/>
                <elementRef key="expan" minOccurs="0"/>
                <elementRef key="term" minOccurs="0"/>
              </alternate>
            </content>
          </elementSpec>
          
          <elementSpec ident="graphic" mode="change">
            <constraintSpec ident="imgFormats" scheme="schematron">
              <constraint>
                <sch:rule context="tei:graphic/@url">
                  <sch:assert test="matches(., '\.(JPG|JPEG|PNG|jpg|png|jpeg)$')" role="error">The image format
                    should be JPG or PNG. Accepted extensions are: jpg, JPG, jpeg, JPEG, png, PNG</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </elementSpec>
        </schemaSpec>
      </div>
    </back>
  </text>
</TEI>
